# Understanding What is .gitignore File: 


* gitignore file is basically a text file placed in your git repository that tells git not to track certain files and folders that you don't want being uploaded to your .git folder. 

* You can write the name of file or/and folder whichever you want to ignore in the gitignore file, and the file or/and folder will be ignored by git. 

* You can also ignore a specific type of files or/and folders by writing down specific patterns in your gitignore file. 

* But the only files or/and folders which will be ignored by git when typed inside gitignore file are those which are untracked. 

* Git ignores a blank folder by default, git does not show an empty folder as untracked because it is empty and there is nothing to track. 


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _



# Learning How to Use gitignore File: 

_ _ _ _ _ _ _ _ _ _ _ _ _


@ Creating a .gitignore File: 


* Open git bash in your git project folder and create a .gitignore file using touch command. 

Command: touch .gitignore
---> This above command will create a ".gitignore" file in your current working directory. 

* Now you can open this .gitignore text file and you can write name of untracked files or/and folders, or you can write general patterns in it to ignore untracked files or/and folders.  

_ _ _ _ _ _ _ _ _ _ _ _ _


@ Understanding How to Use Git Ignore and Its Patterns: 


* Whatever file or/and folder names and general patterns we mention in gitignore file, we write them in relative manner, means w.r.t to the directory in which the gitignore fill is present. 


1) If you want to ignore a file, then you can just directly write that file's name with its file extension in the gitignore file, and that file will be successfully ignored by git if it is an untracked file.

Ex: If you have a file named "error.log" in your project folder, then to ignore the "error.log" file, just open .gitignore file and write "error.log" inside it and save the gitignore text file. 


2) If there are more than one files of ".log" file extension or ".xlsx" file extension or of any file extension, and you want to ignore all of the files of that specific file extension, then you can simply type a general pattern inside your gitignore file to ignore all those files. 

Ex: If there are 3 files named miscellaneous1.xlsx, extrawork.xlsx and a.xlsx, and you want to ignore all these excel files, then instead of typing name of all these excel files in your gitignore file, just because all the files are of same type, you can simply type a general pattern like "*.xlsx".
---> * is a symbol which means "everything in the directory". 
---> So, the above given general pattern says, "Everything in the directory which has a file extension xlsx", and due to this general pattern all the files with .xlsx file extension will be ignored by git because this general pattern is written inside the .gitignore file. 


3) You can also ignore any directory by typing its name in the gitignore file. 

Ex: If there is a directory named "dir" in your git project folder and you want to ignore it then write "dir/" in your gitignore file, and the directories in your git project folder and child folders, which are named "dir" will be ignored. 
---> When you ignore a whole directory, obviously even the files inside it is ignored completely. 


4) If you just want to ignore the "dir" folder, which is present in the main directory where gitignore is present and you don't want to ignore the "dir" folders which are present in the child directories of the main directory, then write this inside the gitignore file "/dir/".  


5) Inside the git ignore file you can write relative paths w.r.t to the gitignore file if you want to ignore specific files or/and folders which are present in a specific location. 
Ex: static/dir/addition 
---> Write above example line in the gitignore file and the specific folder named "addition" will be ignored, which is present at the above given particular relative location w.r.t to the gitignore file. 


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _



# Specifying Exceptions in Patterns Which are Written in gitignore File: 


* If you have a general pattern (like *.log) defined, but you want to commit a specific file. 

* Then you can use negate symbol "!", and you can write the name of that file after negate symbol, to exclude this particular file from the above-mentioned pattern. 

---> So, write "!debug.log" in gitignore file and now you can see this "debug log" is excluded from the above pattern, and now it is not being ignored by git, and it is shown as "untracked", and now you can stage and commit this file, if you want. 


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _



# How to Ignore a File Which is Being Tracked by Git: 


---> If a file is being tracked by git, then you cannot directly ignore that by adding it to .gitignore file. 
---> If you add a file in .gitignore which is being tracked by git, then this logic will not work, git will still keep tracking that file of yours which you have added in .gitignore file, because .gitignore file can only be used to ignore files which are untracked. 
---> So, it simply means that if a file is being tracked and you want to ignore that file, then 1st you have to change that file's status to "untrack" and then you have to add that file to the .gitignore file. 


* Run this below command to make git stop tracking a file and to make its status "Untracked": 

Command: git rm --cached name_of_the_file_which_is_in_tracking_area.with_its_file_extension 

* Whether a file is in the "working directory with modified file status" or whether it is in the "staging area", you can use this above command in both the scenarios to untrack a file, because when the file's status is staged or modified, then it simply means that, that file is being tracked by git and you can untrack is using the above command. 

Ex: git rm --cached first.txt

---> Whichever file's name you've mentioned, this above command will remove that file from the tracking area, and this command will set the status of this file whose name you have written as "Untracked", and now you can add this file to .gitignore and things will work as expected.



_ _ _ _ _ _ _ _ _ _ _ _ _



# References Cited: 


* 7th Video of CodeWithHarry (Complete Git Tutorials For Beginners In Hindi) Playlist : (.gitignore: Ignoring Files in Git | Git Tutorials #7): 
https://www.youtube.com/watch?v=TwKALVoK5cE&list=PLu0W_9lII9agwhy658ZPA0MTStKUJTWPi&index=7 


* 10th Video of CodeWithHarry (Complete Git Tutorials For Beginners In Hindi) Playlist : (Moving and Renaming Files In Git | Git Tutorials #10): 
---> Time Stamp - 5:46 
https://www.youtube.com/watch?v=1t56nLJJbMU&list=PLu0W_9lII9agwhy658ZPA0MTStKUJTWPi&index=10 


* Bitbucket (.gitignore) : You can check all other types of gitignore patterns also in this article: 
https://www.atlassian.com/git/tutorials/saving-changes/gitignore


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 







